/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "MySerialQueue Processor v2"
#HINT "Control Serial data flow"
// #DEFINE_CONSTANT
#CATEGORY "" 
#CATEGORY "10" // Serial
// #DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#HELP_BEGIN 
	If not transmitting delimeter make sure delimeter value is not a part of the string
	If 'QUEUE$' length is greater then 255 then only the first 255 bytes are output
	      to the 'CURRENT_QUEUE_CONTENTS$' to avoid buffer overflow errors.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT SEND_NEXT,INCLUDE_DELIMITER,CLEAR_QUEUE;
//ANALOG_INPUT
STRING_INPUT DELIMITER$[10];
BUFFER_INPUT TO_QUEUE$[1000];

// DIGITAL_OUTPUT 
ANALOG_OUTPUT NUM_OF_CMDS_IN_QUEUE;
STRING_OUTPUT CURRENT_QUEUE_CONTENTS$,TO_DEVICE$;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING QUEUE$[10000];

FUNCTION CMDS_IN_QUEUE()
{
	INTEGER nPTR;
	INTEGER nCOUNT;
	nPTR = 1;
	nCOUNT = 0;
	
	IF(LEN(QUEUE$)> 255)
	{
    	CURRENT_QUEUE_CONTENTS$ =	LEFT(QUEUE$,255);
    }
    ELSE
    {
    	CURRENT_QUEUE_CONTENTS$ =	QUEUE$;
    }

	DO
	{
        nPTR = FIND(DELIMITER$,QUEUE$,nPTR);
		IF(nPTR > 0)
		{
          	nPTR = nPTR + 1;
			nCOUNT = nCOUNT + 1;
		}
	}
    UNTIL(nPTR = 0);

	NUM_OF_CMDS_IN_QUEUE = nCOUNT;
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH SEND_NEXT
{
    INTEGER DELIMITER_LEN;
	INTEGER CMD_LEN;
	STRING CMD$[10000];

	IF((LEN(QUEUE$) > 0) && (FIND(DELIMITER$,QUEUE$,1) > 0))
	{
     	CMD$ = REMOVE(DELIMITER$,QUEUE$,1);
		CMDS_IN_QUEUE();
		IF(INCLUDE_DELIMITER = 1)
		{
			TO_DEVICE$ = CMD$;
		}
		ELSE
		{
			DELIMITER_LEN = LEN(DELIMITER$);
			CMD_LEN = LEN(CMD$);

			TO_DEVICE$ = LEFT(CMD$,(CMD_LEN - DELIMITER_LEN));
			CMD$ = "";
		}
	}
}

PUSH CLEAR_QUEUE
{
	CLEARBUFFER(TO_QUEUE$);
	CLEARBUFFER(QUEUE$);
	CMDS_IN_QUEUE();
}

THREADSAFE CHANGE TO_QUEUE$
{
    QUEUE$ = QUEUE$ + TO_QUEUE$;
    CLEARBUFFER(TO_QUEUE$);
	CMDS_IN_QUEUE();
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

