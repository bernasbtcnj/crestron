/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:	Updated module to work with X and 2 series processors
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "RoomViewUsageLogQueue v2.0"
// #HINT ""
#DEFINE_CONSTANT USAGE 	1
#DEFINE_CONSTANT STAT 	2 

#DEFINE_CONSTANT MAX_STORED_DATA	50
// #CATEGORY "" 
// #DEFAULT_VOLATILE
//#DEFAULT_VOLATILE		//disabled for xgen 
//#ENABLE_STACK_CHECKING	//disabled for xgen

#HELP_BEGIN
This module will take data from any RoomView usage module
and time/date stamp the information. It will then stack
the data in a message QUEUE and periodically transmit the
data to RoomView.
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT RoomView_Online,
							Do_Housekeeping;
						   
// ANALOG_INPUT 
// STRING_INPUT 
BUFFER_INPUT Data_From_Module[255]; 

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
STRING_OUTPUT To_RoomView_Usage_Input; 

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

NONVOLATILE INTEGER intStoredDataCount;
NONVOLATILE STRING strStoredData[MAX_STORED_DATA][155], strBInitialized[3];

STRING strTempData[255];

INTEGER bHousekeeping, intHousekeepingCount;

INTEGER intIndexMain;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Integer_Function NextAvailable()
{
	integer intIndex;
	
	for (intIndex = 1 to MAX_STORED_DATA)
	{
		if (len(strStoredData[intIndex]) = 0)
		{
			return (intIndex);
			break;
		}
	}
}

String_Function CurrentTime()
{
	integer intHour, intMinute, intSecond, bPM;
	string strHour[2], strMinute[2], strSecond[2];
	string strTime[11];
	
	bPM = 0;
	
	intHour = gethournum();
	
	if (intHour > 11) // is time PM
	 bPM = 1;
	 
	if (intHour < 13)
	 strHour = itoa(intHour);
	else
	{
		if (intHour > 12)
		 intHour = intHour - 12;
		 
	 	strHour = itoa(intHour);
	}
	
	
	intMinute = getminutesnum(); 
	
	if (intMinute < 10)
	 strMinute = "0" + itoa(intMinute);
	else
	 strMinute = itoa(intMinute);
	
	intSecond = getsecondsnum();
	
	if (intSecond < 10)
	 strSecond = "0" + itoa(intSecond);
	else
	 strSecond = itoa(intSecond);
	
	
	if (bPM)
	 makestring (strTime, "%s:%s:%s PM", strHour, strMinute, strSecond);
	else
	 makestring (strTime, "%s:%s:%s AM", itoa(intHour), itoa(intMinute), itoa(intSecond));
	
	return (strTime); 
}

Function ProcessData(string Data)
{
	string strIdent[5], strType[8], strTempData[150];
    
	string temp[255];

	temp = data;

	strIdent = remove ("||", temp); // remove the data identifier
	
	makestring (strTempData, "%s%s||%s||%s", strIdent, Date(1), CurrentTime(), temp);
	
	if (intStoredDataCount < MAX_STORED_DATA)
	{
		intStoredDataCount = intStoredDataCount + 1;
		
		strStoredData[NextAvailable()] = strTempData; // stored data into next available slot
	}	
}

Function DoHousekeeping()
{
	integer intIndex;
	
	bHousekeeping = 1;
			
	do
	{
				
		for (intIndex = 1 to MAX_STORED_DATA)
		{
			if (len(strStoredData[intIndex]) > 0) // is there any data?
			{
				To_RoomView_Usage_Input = strStoredData[intIndex];
				intStoredDataCount = intStoredDataCount - 1;
				strStoredData[intIndex] = ""; // make the slot available
			}
		}
						
	}until (intStoredDataCount = 0);

	intStoredDataCount = 0;			
	bHousekeeping = 0;
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
 
PUSH Do_Housekeeping
{
	if (RoomView_Online && !bHousekeeping && intStoredDataCount > 0)
	{	
		call DoHousekeeping();
	}
} 

CHANGE Data_From_Module
{
	strTempData = gather ("\r", Data_From_Module);
	
	call ProcessData(strTempData);
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	//integer intIndex; //No local variables in MAIN for X systems
	
	bHousekeeping = 0;
	
	if (strBInitialized <> "YES")
	{
	 for (intIndexMain = 1 to MAX_STORED_DATA)
	 {
	 	strStoredData[intIndexMain] = "";
	 }
	 
	 intStoredDataCount = 0;
	 strBInitialized = "YES";
	}
}


