/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:Lausdeo
System Name:
System Number:
Programmer:Ajish Raju
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT	csCRLF					"\x0D\x0A"
// #CATEGORY "" 
// #PRINT_TO_TRACE
#DIGITAL_EXPAND Separately 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#PRINT_TO_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT 
Debug;
	
STRING_INPUT 
BMA360ID[3];

BUFFER_INPUT PRO2Rx$[255],
_SKIP_,
_SKIP_,
_SKIP_;


STRING_Output 
BMAOUT;



/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
//TCP_CLIENT TCP_CLIENT_TCPSocket[64];
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
//STRING_PARAMETER


/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
//STRING Valid_Beam$[14],ValidID[3];
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
//INTEGER nBusy;

// LONG_INTEGER
// SIGNED_LONG_INTEGER

//STRING sMsg[256];
//STRING sMsgToParse[100];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*FUNCTION ParseMessage()
{
	INTEGER a;
	BMAOUT = "";
	IF (FIND("BEAMREPORT",sMsgToParse))
	{
		IF(Debug)
			TRACE("sMsgToParse: %s From:   %s",sMsgToParse, BMA360ID);

    	a=(FIND(BMA360ID,sMsgToParse));
		Valid_Beam$ = MID(sMsgToParse, (a+3), 13);
		BMAOUT = Valid_Beam$;
	}

}*/
String_Function sfProcessFeedback(STRING fsTemp)
{
	STRING esTempSend[13];
	INTEGER eiTemp;
	BMAOUT = "";
	IF (FIND("BEAMREPORT",fsTemp))
	{
		IF(Debug)
			TRACE("fsTemp: %s From:   %s",fsTemp, BMA360ID);

    	eiTemp=(FIND(BMA360ID,fsTemp));
		IF (eiTemp)
		{
			esTempSend = MID(fsTemp, (eiTemp+3), 13);
		}
		
	}
	return(esTempSend);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
THREADSAFE CHANGE PRO2Rx$
{
	STRING esTemp[500], esTempSend[250];

	While(1)
	{
		esTemp = gather(csCRLF, PRO2Rx$);
		IF(Debug)
			TRACE("esTemp: %s From:   %s",esTemp, BMA360ID);

		esTempSend = sfProcessFeedback(esTemp);
		if(len(esTempSend) > 0)
		{
			BMAOUT = esTempSend;

		}
	}
}

/*
CHANGE PRO2Rx$
{
	IF(Debug)
		TRACE("PRO2Rx$: Rx'd: %s From:   %s",PRO2Rx$, BMA360ID);
  
	sMsg = PRO2Rx$;
	
	//CLEARBUFFER(PRO2Rx$);

 	IF(nBusy = 0)
	{
		nBusy = 1;
    	IF(Debug)
			TRACE("sMsg: %s From:   %s",sMsg, BMA360ID);
		IF(FIND("\x0D\x0A",sMsg))
		{
		    sMsgToParse = REMOVE("\x0D\x0A",sMsg);
		    ParseMessage();
		}

		nBusy = 0;
	}
  
}
  */
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.
 
	WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}

