/*
 * Epson Projector Control
 * Targeted towards Epson laser projectors
 *
 * TCNJ
 * Author: Brian Bernas
 * bernasb@tcnj.edu
 * brianbernas@gmail.com
 */

#CATEGORY "24" // TV/Video Projector
#ENABLE_TRACE

// IO
Digital_Input	_skip_,
				_skip_,
				Power_On,
				Power_Off,
				_skip_,
				_skip_,
				_skip_,
				Input_RGB,
				Input_HDMI,
				Input_HDBT,
				_skip_,
				AV_Mute_On,
				AV_Mute_Off,
				AV_Mute_Toggle,
				_skip_,
				Enable_Polling;

Buffer_Input	From_Projector[16];

Digital_Output	Status_Fb,
				_skip_,
				Power_On_Fb,
				Power_Off_Fb,
				Power_Warming_Fb,
				Power_Cooling_Fb,
				_skip_,
				Input_RGB_Fb,
				Input_HDMI_Fb,
				Input_HDBT_Fb,
				_skip_,
				AV_Mute_On_Fb,
				AV_Mute_Off_Fb,
				_skip_;

Analog_Output	Lamp_Hours;

String_Output	_skip_,
				To_Projector;

// Variables
Integer			Power_State,
				Projector_Ready,
				Next_Cmd;

// Functions
Function Poll_Status()
{
	// Reset Next command if 0
	if (Next_Cmd = 0) {
		Next_Cmd = 4;
	}

	// If projector is warming or cooling
	// Only poll power status
	if (Power_State > 1) {
		Next_Cmd = 1;
	}

	switch (Next_Cmd) {
		case (1):
		{
			To_Projector = "PWR?\x0D";
		}
		case (2):
		{
			To_Projector = "LAMP?\x0D";
		}
		case (3):
		{
			To_Projector = "MUTE?\x0D";
		}
		case (4):
		{
			To_Projector = "SOURCE?\x0D";
		}
	}

	Next_Cmd = Next_Cmd - 1; // Move to the next Command
}

Function Run_Poll_Loop(Long_Integer interval)
{
	// Start at the top of the command stack
	Next_Cmd = 4;

	While (Enable_Polling) {
		Wait(interval, PollingMain) {
			Poll_Status();
		}
	}
}

Function Confirm_Power()
{
	// Stop the main Polling Loop
	CancelWait(PollingMain);

	While (Power_State > 1) {
		// 10 seconds between loops
		Wait(1000, PollingPower) {
			Poll_Status();
		}
	}
	
	// If the projector powered on, get all the other info
	if (Power_State = 1) {
		Next_Cmd = 4; // Start at the top
		delay(200); // 2 second delay
		Poll_Status(); // Source
		delay(200); // wait 2 seconds
		Poll_Status(); // Mute
		delay(200); // wait 2 seconds
		Poll_Status(); // Lamp hours
		Next_Cmd = 4; // Start at the top again
	}

	// Resume the main polling loop
	Run_Poll_Loop(30000);
}

Function Set_Power_State_off()
{
	// Clear all of the variables to the off state
	Power_Off_Fb = 1;
	Power_On_Fb = 0;
	Power_Warming_Fb = 0;
	Power_Cooling_Fb = 0;
	AV_Mute_On_Fb = 0;
	AV_Mute_Off_Fb = 0;
	Input_RGB_Fb = 0;
	Input_HDMI_Fb = 0;
	Input_HDBT_Fb = 0;
	Power_State = 0;
	
	// Projector is ready for the next command
	Projector_Ready = 1;
}

// Signals

Push Power_On
{
	if (Power_State = 0) {
		To_Projector = "PWR ON\x0D";
		Power_On_Fb = 1;
		Power_Warming_Fb = 1;
		Power_State = 2; // Projector Warming
		Projector_Ready = 0;
		Confirm_Power();
	}
}

Push Power_Off
{
	if (Power_State = 1) {
		To_Projector = "PWR OFF\x0D";
		Power_Off_Fb = 0;
		Power_Cooling_Fb = 1;
		Power_State = 3; // Projector Cooling
		Confirm_Power();
	}
}

Push Input_RGB
{
	if (Power_State = 1) {
		To_Projector = "SOURCE 11\x0D";
		Input_RGB_Fb = 1;
		Input_HDMI_Fb = 0;
		Input_HDBT_Fb = 0;
	}
}

Push Input_HDMI
{
	if (Power_State = 1) {
		To_Projector = "SOURCE 30\x0D";
		Input_RGB_Fb = 0;
		Input_HDMI_Fb = 1;
		Input_HDBT_Fb = 0;
	}
}

Push Input_HDBT
{
	if (Power_State = 1) {
		To_Projector = "SOURCE 80\x0D";
		Input_RGB_Fb = 0;
		Input_HDMI_Fb = 0;
		Input_HDBT_Fb = 1;
	}
}

Push AV_Mute_On
{
	if (Power_State = 1) {
		To_Projector = "MUTE ON\x0D";
		AV_Mute_On_Fb = 1;
		AV_Mute_Off_Fb = 0;
	}
}

Push AV_Mute_Off
{
	if (Power_State = 1) {
		To_Projector = "MUTE OFF\x0D";
		AV_Mute_On_Fb = 0;
		AV_Mute_Off_Fb = 1;
	}
}

Push AV_Mute_Toggle
{
	if (Power_State = 1) {
		if (AV_Mute_Off_Fb) {
			To_Projector = "MUTE ON\x0D";
			AV_Mute_On_Fb = 1;
			AV_Mute_Off_Fb = 0;
		}
		if (AV_Mute_On_Fb) {
			To_projector = "MUTE OFF\x0D";
			AV_Mute_Off_Fb = 1;
			AV_Mute_On_Fb = 0;
		}
	}
}
	
Change From_Projector
{
	// Process responses from the projector

	// Local variable to indicate a valid response
	Integer success;
	
	success = 0;

	// process the responses from the projector
	if (From_Projector = ":\x0D") {
		// Basic response. Indicates the projector has finished processing the last request
		Projector_Ready = 1;
		success = 1;
	} else if (left(From_Projector, 5) = "LAMP=") {
		// recalculate lamp hours
		Lamp_Hours = atoi(From_Projector);
		success = 1;
	} else if (From_Projector = "PWR=00\x0D:") {
		// power status is off
		Set_Power_State_Off();
		success = 1;
	} else if (From_Projector = "PWR=01\x0D:") {
		// power status is on
		Power_On_Fb = 1;
		Power_Off_Fb = 0;
		Power_Warming_Fb = 0;
		Power_Cooling_Fb = 0;
		Power_State = 1;
		Projector_Ready = 1;
		success = 1;
	} else if (From_Projector = "PWR=02\x0D:") {
		// power is warming
		Power_On_Fb = 1;
		Power_Warming_Fb = 1;
		Power_Off_Fb = 0;
		Power_Cooling_Fb = 0;
		Power_State = 2;
		Projector_Ready = 0;
		success = 1;
	} else if (From_Projector = "PWR=03\x0D:") {
		// power is cooling
		Power_Off_Fb = 1;
		Power_Cooling_Fb = 1;
		Power_On_Fb = 0;
		Power_Warming_Fb = 0;
		Power_State = 3;
		Projector_Ready = 0;
		success = 1;
	} else if (From_Projector = "PWR=04\x0D:") {
		// power is off with lan enabled
		Set_Power_State_Off();
		success = 1;
	} else if (From_Projector = "PWR=09\x0D:") {
		// power is off with hdbt control enabled
		Set_Power_State_Off();
		success = 1;
	} else if (From_Projector = "SOURCE=11\x0D:") {
		// input is RGB / VGA
		Input_RGB_Fb = 1;
		Input_HDMI_Fb = 0;
		Input_HDBT_Fb = 0;
		success = 1;
	} else if (From_Projector = "SOURCE=30\x0D:") {
		// input is HDMI
		Input_HDMI_Fb = 1;
		Input_RGB_Fb = 0;
		Input_HDBT_Fb = 0;
		success = 1;
	} else if (From_Projector = "SOURCE=80\x0D:") {
		// input is HDBT
		Input_HDBT_Fb = 1;
		Input_RGB_Fb = 0;
		Input_HDMI_Fb = 0;
		success = 1;
	} else if (From_Projector = "MUTE=ON\x0D:") {
		AV_Mute_On_Fb = 1;
		AV_Mute_Off_Fb = 0;
		success = 1;
	} else if (From_Projector = "MUTE=OFF\x0D:") {
		AV_Mute_Off_Fb = 1;
		AV_Mute_On_Fb = 0;
		success = 1;
	}
    
	// After a valid command has been received, clear the buffer
	if (success) {
		ClearBuffer(From_Projector);
		Status_Fb = 1;
	}		
}

Push Enable_Polling
{
	Run_Poll_Loop(30000);
}

Release Enable_Polling
{
	CancelWait(PollingMain);
}

Function main()
{
	WaitForInitializationComplete();
	
	// Initialize all variables
	Power_State = 0;
	Projector_Ready = 0;
	Next_Cmd = 0;
	Status_Fb = 0; 
}
		