/*
 * TCNJ NVX Switching Module with Custom Order
 * Routes up to 16 inputs to one output for NVX video with NAX audio breakaway
 * Inputs can be in a custom order
 *
 * Because analog values are easier to work with than serials / strings
 * and managing input order and multicast addresses is a headache
 * 
 *
 * Programmer: Brian Bernas
 * bernasb@tcnj.edu
 * brianbernas@gmail.com
 *
 */

#CATEGORY "46" "TCNJ"

#DEFINE_CONSTANT SOURCES 16 // Number of input sources

#DEFAULT_VOLATILE

// This is needed to keep data together
Structure NVXDevice
{
	String	Name[24];
	Integer	Icon;
	Integer	Enabled;
	String	Stream[50];
	String	Multicast[50];
	Integer	InputIndex;
};

// IO
Analog_Input	OrderedVideoRoute,		// Set the video route based on the ordered list
				OrderedAudioRoute,		// Set the audio route based on the ordered list
				UnorderedVideoRoute,	// Set the video route based on the unordered list
				UnorderedAudioRoute;	// Set the audio route based on the unordered list

String_Input	_skip_,
				InputOrder[64];			// Set the sort order of the inputs

Digital_Input	InputEnabled[SOURCES], // Defines whether inputs are enabled
				_skip_;
	
Analog_Input	_skip_,
				_skip_,
				_skip_,
				InputIcon[SOURCES];	// Set Input Icons

String_Input	_skip_,
				InputName[SOURCES][24];				 // Names of the Inputs (24 char max)
String_Input	_skip_,
				NVXEncStreamLocation[SOURCES][50]; 	// NVX Stream Address
String_Input	_skip_,
				NAXMulticastAddress[SOURCES][50];	// NAX Audio Multicast Address

Analog_Output	OrderedVideoRoute_Fb,		// Current video and audio route in order
				OrderedAudioRoute_Fb,
				UnorderedVideoRoute_Fb,
				UnorderedAudioRoute_Fb;	// The current video and audio route, not defined by order
String_Output	_skip_,
				_skip_,
				NVXDecStreamLocation, 	// NVX Route address
				NAXDecRXMulticast;		// NAX Route Address

Digital_Output	OrderedInputEnabled[SOURCES], 		// Input Enabled in sort order
				_skip_;
Analog_Output	_skip_,
				OrderedInputIcon[SOURCES];			// Input Icon in sort order
String_Output	_skip_,
				OrderedInputName[SOURCES];			// Input names in sort order

// Create these as a global variable so multiple functions can access them
// Array of NVX devices
NVXDevice devices[SOURCES];

// Functions

// Create a default order string
String_Function CreateOrder()
{
	Integer i;
	String order[40], tmporder[40];
	
	for (i = 1 to SOURCES) {
		if (i = 1) {
			// Start at the beginning, just the first number
			MakeString(order, "%u", i);
		} else {
			// Set the tmp order to the same as order
			tmporder = order;
			// Add a comma ',' and the number
			MakeString(order, "%s,%u", tmporder, i);
		}
	}

	return(order);
}

// Sets the attributes of a device index
Function SetDevice(Integer index, Integer insert)
{
	devices[index].Name		 = InputName[insert];
	devices[index].Icon		 = InputIcon[insert];
	devices[index].Enabled	 = InputEnabled[insert];
	devices[index].Stream	 = NVXEncStreamLocation[insert];
	devices[index].Multicast = NAXMulticastAddress[insert];
	devices[index].InputIndex = insert; // Where did I come from
}

// Set output attributes
Function EvaluateOutputs()
{
	Integer i;

	For (i = 1 to SOURCES) {
		OrderedInputEnabled[i] = devices[i].Enabled;
		OrderedInputIcon[i] = devices[i].Icon;
		OrderedInputName[i] = devices[i].Name;
	}
}

// Calculates the order of devices
Function CalculateOrder()
{
	String tmporder[40];
	Integer loc, cur;
	Integer length;
	Integer index, insert;

	loc = 0;
	cur= 1;
	insert = 1;

	// Check the length of the InputOrder string
	// Should be longer than 1
	length = len(InputOrder);
	if (length < 5) {
		// Create a default order
		tmporder = CreateOrder();
		length = len(tmporder);
	} else {
		tmporder = InputOrder;
	}

	// Otherwise continue
	for (index = 1 to SOURCES - 1) {
		loc = Find(",", tmporder, cur);
		
		if (loc > cur) {
			insert = atoi(Mid(tmporder, cur, loc - cur)); // Get the number and convert to integer

			// Assign the device to the correct order
			if (insert > 0 && insert <= SOURCES) {
				SetDevice(index, insert);
			}

			cur = loc + 1; // Set the cursor to the end of the location
		}
	}

	// Set the outputs
	EvaluateOutputs();
}

Change InputEnabled
{
	CalculateOrder();
}

Change InputName
{
	// Recalculate everything if an input name changes
	CalculateOrder();
}

Change InputIcon
{
	CalculateOrder();
}

Change OrderedVideoRoute
{
	if (OrderedVideoRoute = 0) {
		NVXDecStreamLocation = ""; // Clear if 0
		UnorderedVideoRoute_Fb = 0;
		OrderedVideoRoute_Fb = 0;
	} else {
		// Set the stream location
		NVXDecStreamLocation = devices[OrderedVideoRoute].Stream;
		OrderedVideoRoute_Fb = OrderedVideoRoute;
		UnorderedVideoRoute_Fb = devices[OrderedVideoRoute].InputIndex;
	}
}

Change OrderedAudioRoute
{
	if (OrderedAudioRoute = 0) {
		NAXDecRXMulticast = "";
		UnorderedAudioRoute_Fb = 0;
		OrderedAudioRoute_Fb = 0;
	} else {
		NAXDecRXMulticast = devices[OrderedAudioRoute].Multicast;
		OrderedAudioRoute_Fb = OrderedAudioRoute;
		UnorderedAudioRoute_Fb = devices[OrderedAudioRoute].InputIndex;
	}
}

Change UnorderedVideoRoute
{
	Integer i;

	if (UnorderedVideoRoute = 0) {
		NVXDecStreamLocation = ""; // Clear if 0
		UnorderedVideoRoute_Fb = 0;
		OrderedVideoRoute_Fb = 0;
	} else {
		// Set the stream location
		for (i = 1 to SOURCES) {
			if (devices[i].InputIndex = UnorderedVideoRoute) {
				NVXDecStreamLocation = devices[i].Stream;
				OrderedVideoRoute_Fb = i;
				UnorderedVideoRoute_Fb = UnorderedVideoRoute;
				break;
			}
		}
	}
}

Change UnorderedAudioRoute
{
	Integer i;

	if (UnorderedAudioRoute = 0) {
		NAXDecRXMulticast = ""; // Clear if 0
		UnorderedAudioRoute_Fb = 0;
		OrderedAudioRoute_Fb = 0;
	} else {
		// Set the stream location
		for (i = 1 to SOURCES) {
			if (devices[i].InputIndex = UnorderedAudioRoute) {
				NAXDecRXMulticast = devices[i].Multicast;
				OrderedAudioRoute_Fb = i;
				UnorderedAudioRoute_Fb = UnorderedAudioRoute;
				break;
			}
		}
	}
}

Change InputOrder
{
	// Figure out the new input order
	CalculateOrder();	
}

Function main()
{
	Integer i;

	WaitForInitializationComplete();

	// Initialize device list

	for (i = 1 to SOURCES) {
		devices[i].Name = "[None]";
		devices[i].Icon = 1;
		devices[i].Enabled = 0;
		devices[i].Stream = "";
		devices[i].Multicast = "";
		devices[i].InputIndex = 0;
	}

	// Calculate the initial order
	CalculateOrder();		
}
