//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.101.8.0
//     UI Plugin:   1.3701.9.0
//
//     Project:     STEM-107
//     Version:     1.0.0.0
//     Sdk:         CH5:2.11.1.2
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using STEM107;

namespace STEM107.Main.SourceSelect
{

    /// <summary>
    /// SourceSelect
    /// </summary>
    public partial interface ISourceSelect 
    {
        object UserObject { get; set; }

        /// <summary>
        /// ComplexComponent Stu-Disp-Source-Select
        /// </summary>
        STEM107.Main.SourceSelect.IStuDispSourceSelect StuDispSourceSelect { get; }

        /// <summary>
        /// ComplexComponent Disp1-Source-Select
        /// </summary>
        STEM107.Main.SourceSelect.IDisp1SourceSelect Disp1SourceSelect { get; }
    }


    /// <summary>
    /// SourceSelect
    /// </summary>
    internal partial class SourceSelect : ISourceSelect, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="SourceSelect"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal SourceSelect(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SourceSelect"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal SourceSelect(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="SourceSelect"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            StuDispSourceSelect = new STEM107.Main.SourceSelect.StuDispSourceSelect(ComponentMediator, 11);
            Disp1SourceSelect = new STEM107.Main.SourceSelect.Disp1SourceSelect(ComponentMediator, 12);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((STEM107.Main.SourceSelect.StuDispSourceSelect)StuDispSourceSelect).AddDevice(device);

            ((STEM107.Main.SourceSelect.Disp1SourceSelect)Disp1SourceSelect).AddDevice(device);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((STEM107.Main.SourceSelect.StuDispSourceSelect)StuDispSourceSelect).RemoveDevice(device);

            ((STEM107.Main.SourceSelect.Disp1SourceSelect)Disp1SourceSelect).RemoveDevice(device);
        }

        #endregion

        #region CH5 Contract

        /// <summary>
        /// ComplexComponent Stu-Disp-Source-Select
        /// </summary>
        public STEM107.Main.SourceSelect.IStuDispSourceSelect StuDispSourceSelect { get; private set; }

        /// <summary>
        /// ComplexComponent Disp1-Source-Select
        /// </summary>
        public STEM107.Main.SourceSelect.IDisp1SourceSelect Disp1SourceSelect { get; private set; }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "SourceSelect", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

        }

        #endregion
    }
}
