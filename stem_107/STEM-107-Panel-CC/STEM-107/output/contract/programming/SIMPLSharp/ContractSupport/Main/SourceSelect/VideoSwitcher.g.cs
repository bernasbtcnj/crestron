//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.101.8.0
//     UI Plugin:   1.3701.9.0
//
//     Project:     STEM-107
//     Version:     1.0.0.0
//     Sdk:         CH5:2.11.1.2
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using STEM107;

namespace STEM107.Main.SourceSelect
{

    /// <summary>
    /// Allow events by list item and states (feedbacks) to be set by item index.
    /// </summary>
    public partial interface IVideoSwitcherByItem
    {
        /// <summary>
        /// Fires on Select Source or Source Changed.  Event carries <see="IndexedScreenEventArgs"/> with ScreenIndex property (0 based).
        /// </summary>
        event EventHandler<IndexedScreenEventArgs> Select_SourceEvent;
        /// <summary>
        /// Fires on Select Source or Source Changed.  Event carries <see="IndexedScreenEventArgs"/> with ScreenIndex property (0 based).
        /// </summary>
        event EventHandler<IndexedScreenEventArgs> Source_ChangedEvent;

        /// <summary>
        /// Main.SourceSelect.Source1._Feedback Feedback
        /// </summary>
        /// <param name="screenIndex">The index of the screen (0 based).</param>
        /// <param name="callback">The delegate to set the feedback.</param>
        void Source_Selected(ushort screenIndex, VideoSwitcherUShortInputSigDelegate callback);

        /// <summary>
        /// Helper Main.SourceSelect.Source1._Feedback Feedback
        /// </summary>
        /// <param name="screenIndex">The index of the screen (0 based).</param>
        /// <param name="analog">The <see="ushort"/> analog value to set.</param>
        void Source_Selected(ushort screenIndex, ushort analog);

        /// <summary>
        /// Helper Main.SourceSelect.Source1._Feedback Feedback
        /// </summary>
        /// <param name="screenIndex">The index of the screen (0 based).</param>
        /// <param name="analog">The <see="short"/> analog value to set.</param>
        void Source_Selected(ushort screenIndex, short analog);

        /// <summary>
        /// Main.SourceSelect.Screen1._Label Feedback
        /// </summary>
        /// <param name="screenIndex">The index of the screen (0 based).</param>
        /// <param name="callback">The delegate to set the feedback.</param>
        void Screen_Indirect_Text(ushort screenIndex, VideoSwitcherStringInputSigDelegate callback);

        /// <summary>
        /// Helper Main.SourceSelect.Screen1._Label Feedback
        /// </summary>
        /// <param name="screenIndex">The index of the screen (0 based).</param>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Screen_Indirect_Text(ushort screenIndex, string serial);


        /// <summary>
        /// Main.SourceSelect.Source_1._Label Feedback
        /// </summary>
        /// <param name="sourceIndex">The index of the source (0 based).</param>
        /// <param name="callback">The delegate to set the feedback.</param>
        void Source_Indirect_Text(ushort sourceIndex, VideoSwitcherStringInputSigDelegate callback);

        /// <summary>
        /// Helper Main.SourceSelect.Source_1._Label Feedback
        /// </summary>
        /// <param name="sourceIndex">The index of the source (0 based).</param>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source_Indirect_Text(ushort sourceIndex, string serial);

    }


    /// <summary>
    /// Search List
    /// </summary>
    internal partial class VideoSwitcher
    {
        #region CH5 Contract
        /// <inheritdoc/>
        public event EventHandler<IndexedScreenEventArgs> Select_SourceEvent;
        private void onSelect_Source(IndexedEventArgs eventArgs)
        {
            EventHandler<IndexedScreenEventArgs> handler = Select_SourceEvent;
            if (handler != null)
                handler(this, new IndexedScreenEventArgs((SmartObjectEventArgs)eventArgs.SigArgs, eventArgs.JoinIndex));
        }
                
        /// <inheritdoc/>
        public event EventHandler<IndexedScreenEventArgs> Source_ChangedEvent;
        private void onSource_Changed(IndexedEventArgs eventArgs)
        {
            EventHandler<IndexedScreenEventArgs> handler = Source_ChangedEvent;
            if (handler != null)
                handler(this, new IndexedScreenEventArgs((SmartObjectEventArgs)eventArgs.SigArgs, eventArgs.JoinIndex));
        }
                

        /// <inheritdoc/>
        public void Source_Selected(ushort screenIndex, VideoSwitcherUShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.Screen_1_Source_SelectedState + (uint)screenIndex * 1], this);
            }
        }

        /// <inheritdoc/>
        public void Source_Selected(ushort screenIndex, ushort analog)
        {
            Source_Selected(screenIndex, (sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void Source_Selected(ushort screenIndex, short analog)
        {
            Source_Selected(screenIndex, (sig, component) => sig.ShortValue = analog);
        }

        /// <inheritdoc/>
        public void Screen_Indirect_Text(ushort screenIndex, VideoSwitcherStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Screen_1_Screen_Indirect_TextState + (uint)screenIndex * 1], this);
            }
        }

        /// <inheritdoc/>
        public void Screen_Indirect_Text(ushort screenIndex, string serial)
        {
            Screen_Indirect_Text(screenIndex, (sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source_Indirect_Text(ushort sourceIndex, VideoSwitcherStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source_1_Source_Indirect_TextState + (uint)sourceIndex * 1], this);
            }
        }

        /// <inheritdoc/>
        public void Source_Indirect_Text(ushort sourceIndex, string serial)
        {
            Source_Indirect_Text(sourceIndex, (sig, component) => sig.StringValue = serial);
        }

        #endregion
    }

    /// <summary>
    /// Video-Switcher
    /// </summary>
    public partial interface IVideoSwitcher : IVideoSwitcherByItem
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event Main.SourceSelect.Source1._Selection (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Screen_1_Select_SourceEvent;

        /// <summary>
        /// Event Main.SourceSelect.Source2._Selection (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Screen_2_Select_SourceEvent;

        /// <summary>
        /// Event Main.SourceSelect.Screen_1._Changed (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Screen_1_Source_ChangedEvent;

        /// <summary>
        /// Event Main.SourceSelect.Screen_2._Changed (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Screen_2_Source_ChangedEvent;

        /// <summary>
        /// Main.SourceSelect.Video-Switcher.Number of Screens Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void VideoSwitcher_NumberOfScreens(VideoSwitcherUShortInputSigDelegate callback);

        /// <summary>
        /// Main.SourceSelect.Video-Switcher.Number of Screens Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void VideoSwitcher_NumberOfScreens(ushort analog);

        /// <summary>
        /// Main.SourceSelect.Video-Switcher.Number of Screens Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void VideoSwitcher_NumberOfScreens(short analog);

        /// <summary>
        /// Main.SourceSelect.Source1._Feedback Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void Screen_1_Source_Selected(VideoSwitcherUShortInputSigDelegate callback);

        /// <summary>
        /// Main.SourceSelect.Source1._Feedback Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void Screen_1_Source_Selected(ushort analog);

        /// <summary>
        /// Main.SourceSelect.Source1._Feedback Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void Screen_1_Source_Selected(short analog);

        /// <summary>
        /// Main.SourceSelect.Source2._Feedback Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void Screen_2_Source_Selected(VideoSwitcherUShortInputSigDelegate callback);

        /// <summary>
        /// Main.SourceSelect.Source2._Feedback Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void Screen_2_Source_Selected(ushort analog);

        /// <summary>
        /// Main.SourceSelect.Source2._Feedback Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void Screen_2_Source_Selected(short analog);

        /// <summary>
        /// Main.SourceSelect.Screen1._Label Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Screen_1_Screen_Indirect_Text(VideoSwitcherStringInputSigDelegate callback);

        /// <summary>
        /// Main.SourceSelect.Screen1._Label Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Screen_1_Screen_Indirect_Text(string serial);

        /// <summary>
        /// Main.SourceSelect.Screen2._Label Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Screen_2_Screen_Indirect_Text(VideoSwitcherStringInputSigDelegate callback);

        /// <summary>
        /// Main.SourceSelect.Screen2._Label Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Screen_2_Screen_Indirect_Text(string serial);

        /// <summary>
        /// Main.SourceSelect.Source_1._Label Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source_1_Source_Indirect_Text(VideoSwitcherStringInputSigDelegate callback);

        /// <summary>
        /// Main.SourceSelect.Source_1._Label Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source_1_Source_Indirect_Text(string serial);

        /// <summary>
        /// Main.SourceSelect.Source_2._Label Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source_2_Source_Indirect_Text(VideoSwitcherStringInputSigDelegate callback);

        /// <summary>
        /// Main.SourceSelect.Source_2._Label Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source_2_Source_Indirect_Text(string serial);

        /// <summary>
        /// Main.SourceSelect.Source_3._Label Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source_3_Source_Indirect_Text(VideoSwitcherStringInputSigDelegate callback);

        /// <summary>
        /// Main.SourceSelect.Source_3._Label Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source_3_Source_Indirect_Text(string serial);

        /// <summary>
        /// Main.SourceSelect.Source_4._Label Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source_4_Source_Indirect_Text(VideoSwitcherStringInputSigDelegate callback);

        /// <summary>
        /// Main.SourceSelect.Source_4._Label Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source_4_Source_Indirect_Text(string serial);
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="videoswitcher">The <see cref="IVideoSwitcher"/> on which to apply the feedback.</param>
    public delegate void VideoSwitcherBoolInputSigDelegate(BoolInputSig boolInputSig, IVideoSwitcher videoswitcher);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="uShortInputSig">The <see cref="UShortInputSig"/> joinInfo data.</param>
    /// <param name="videoswitcher">The <see cref="IVideoSwitcher"/> on which to apply the feedback.</param>
    public delegate void VideoSwitcherUShortInputSigDelegate(UShortInputSig uShortInputSig, IVideoSwitcher videoswitcher);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="videoswitcher">The <see cref="IVideoSwitcher"/> on which to apply the feedback.</param>
    public delegate void VideoSwitcherStringInputSigDelegate(StringInputSig stringInputSig, IVideoSwitcher videoswitcher);

    /// <summary>
    /// Video-Switcher
    /// </summary>
    internal partial class VideoSwitcher : IVideoSwitcher, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.SourceSelect.VideoSwitcher.Screen_1_Changed
                /// Main.SourceSelect.Screen_1._Changed
                /// </summary>
                public const uint Screen_1_Source_ChangedEvent = 73;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.SourceSelect.VideoSwitcher.Screen_2_Changed
                /// Main.SourceSelect.Screen_2._Changed
                /// </summary>
                public const uint Screen_2_Source_ChangedEvent = 74;


            }
            /// <summary>
            /// Analog signals.
            /// </summary>
            internal static class Numerics
            {
                /// <summary>
                /// Output or Event analog joinInfo from panel to Control System: Main.SourceSelect.VideoSwitcher.Source1_Selection
                /// Main.SourceSelect.Source1._Selection
                /// </summary>
                public const uint Screen_1_Select_SourceEvent = 37;

                /// <summary>
                /// Output or Event analog joinInfo from panel to Control System: Main.SourceSelect.VideoSwitcher.Source2_Selection
                /// Main.SourceSelect.Source2._Selection
                /// </summary>
                public const uint Screen_2_Select_SourceEvent = 38;


                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: Main.SourceSelect.VideoSwitcher.NumberOfScreens
                /// Main.SourceSelect.Video-Switcher.Number of Screens
                /// </summary>
                public const uint VideoSwitcher_NumberOfScreensState = 1;

                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: Main.SourceSelect.VideoSwitcher.Source1_Feedback
                /// Main.SourceSelect.Source1._Feedback
                /// </summary>
                public const uint Screen_1_Source_SelectedState = 3;

                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: Main.SourceSelect.VideoSwitcher.Source2_Feedback
                /// Main.SourceSelect.Source2._Feedback
                /// </summary>
                public const uint Screen_2_Source_SelectedState = 4;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.SourceSelect.VideoSwitcher.Screen1_Label
                /// Main.SourceSelect.Screen1._Label
                /// </summary>
                public const uint Screen_1_Screen_Indirect_TextState = 1;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.SourceSelect.VideoSwitcher.Screen2_Label
                /// Main.SourceSelect.Screen2._Label
                /// </summary>
                public const uint Screen_2_Screen_Indirect_TextState = 2;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.SourceSelect.VideoSwitcher.Source_1_Label
                /// Main.SourceSelect.Source_1._Label
                /// </summary>
                public const uint Source_1_Source_Indirect_TextState = 37;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.SourceSelect.VideoSwitcher.Source_2_Label
                /// Main.SourceSelect.Source_2._Label
                /// </summary>
                public const uint Source_2_Source_Indirect_TextState = 38;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.SourceSelect.VideoSwitcher.Source_3_Label
                /// Main.SourceSelect.Source_3._Label
                /// </summary>
                public const uint Source_3_Source_Indirect_TextState = 39;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.SourceSelect.VideoSwitcher.Source_4_Label
                /// Main.SourceSelect.Source_4._Label
                /// </summary>
                public const uint Source_4_Source_Indirect_TextState = 40;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="VideoSwitcher"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal VideoSwitcher(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideoSwitcher"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal VideoSwitcher(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="VideoSwitcher"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Screen_1_Source_ChangedEvent, onScreen_1_Source_Changed);
            ComponentMediator.ConfigureBooleanItemEvent(controlJoinId, Joins.Booleans.Screen_1_Source_ChangedEvent, GetIndexes, onSource_Changed);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Screen_2_Source_ChangedEvent, onScreen_2_Source_Changed);
            ComponentMediator.ConfigureNumericEvent(controlJoinId, Joins.Numerics.Screen_1_Select_SourceEvent, onScreen_1_Select_Source);
            ComponentMediator.ConfigureNumericItemEvent(controlJoinId, Joins.Numerics.Screen_1_Select_SourceEvent, GetIndexes, onSelect_Source);
            ComponentMediator.ConfigureNumericEvent(controlJoinId, Joins.Numerics.Screen_2_Select_SourceEvent, onScreen_2_Select_Source);
        }

        /// <summary>
        /// Get the offset when using indexed complex components.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId of the component.</param>
        /// <param name="join">The join offset.</param>
        /// <param name="eSigType">The join data type.</param>
        private Indexes GetIndexes(uint controlJoinId, uint join, eSigType eSigType)
        {
            if (controlJoinId == ControlJoinId &&
                eSigType == eSigType.Bool &&
                join >= Joins.Booleans.Screen_1_Source_ChangedEvent &&
                join <= 74)
            {
                return new Indexes(0, (ushort)(join - Joins.Booleans.Screen_1_Source_ChangedEvent), false);
            }
            if (controlJoinId == ControlJoinId &&
                eSigType == eSigType.UShort &&
                join >= Joins.Numerics.Screen_1_Select_SourceEvent &&
                join <= 38)
            {
                return new Indexes(0, (ushort)(join - Joins.Numerics.Screen_1_Select_SourceEvent), false);
            }

            return new Indexes(0, 0, true);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Screen_1_Select_SourceEvent;
        private void onScreen_1_Select_Source(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Screen_1_Select_SourceEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Screen_2_Select_SourceEvent;
        private void onScreen_2_Select_Source(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Screen_2_Select_SourceEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Screen_1_Source_ChangedEvent;
        private void onScreen_1_Source_Changed(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Screen_1_Source_ChangedEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Screen_2_Source_ChangedEvent;
        private void onScreen_2_Source_Changed(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Screen_2_Source_ChangedEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }


        /// <inheritdoc/>
        public void Screen_1_Source_Selected(VideoSwitcherUShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.Screen_1_Source_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Screen_1_Source_Selected(ushort analog)
        {
            Screen_1_Source_Selected((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void Screen_1_Source_Selected(short analog)
        {
            Screen_1_Source_Selected((sig, component) => sig.ShortValue = analog);
        }
        /// <inheritdoc/>
        public void Screen_2_Source_Selected(VideoSwitcherUShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.Screen_2_Source_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Screen_2_Source_Selected(ushort analog)
        {
            Screen_2_Source_Selected((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void Screen_2_Source_Selected(short analog)
        {
            Screen_2_Source_Selected((sig, component) => sig.ShortValue = analog);
        }
        /// <inheritdoc/>
        public void VideoSwitcher_NumberOfScreens(VideoSwitcherUShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.VideoSwitcher_NumberOfScreensState], this);
            }
        }

        /// <inheritdoc/>
        public void VideoSwitcher_NumberOfScreens(ushort analog)
        {
            VideoSwitcher_NumberOfScreens((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void VideoSwitcher_NumberOfScreens(short analog)
        {
            VideoSwitcher_NumberOfScreens((sig, component) => sig.ShortValue = analog);
        }

        /// <inheritdoc/>
        public void Screen_1_Screen_Indirect_Text(VideoSwitcherStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Screen_1_Screen_Indirect_TextState], this);
            }
        }

        /// <inheritdoc/>
        public void Screen_1_Screen_Indirect_Text(string serial)
        {
            Screen_1_Screen_Indirect_Text((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Screen_2_Screen_Indirect_Text(VideoSwitcherStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Screen_2_Screen_Indirect_TextState], this);
            }
        }

        /// <inheritdoc/>
        public void Screen_2_Screen_Indirect_Text(string serial)
        {
            Screen_2_Screen_Indirect_Text((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source_1_Source_Indirect_Text(VideoSwitcherStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source_1_Source_Indirect_TextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source_1_Source_Indirect_Text(string serial)
        {
            Source_1_Source_Indirect_Text((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source_2_Source_Indirect_Text(VideoSwitcherStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source_2_Source_Indirect_TextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source_2_Source_Indirect_Text(string serial)
        {
            Source_2_Source_Indirect_Text((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source_3_Source_Indirect_Text(VideoSwitcherStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source_3_Source_Indirect_TextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source_3_Source_Indirect_Text(string serial)
        {
            Source_3_Source_Indirect_Text((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source_4_Source_Indirect_Text(VideoSwitcherStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source_4_Source_Indirect_TextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source_4_Source_Indirect_Text(string serial)
        {
            Source_4_Source_Indirect_Text((sig, component) => sig.StringValue = serial);
        }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "VideoSwitcher", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            Screen_1_Select_SourceEvent = null;
            Select_SourceEvent = null;
            Screen_2_Select_SourceEvent = null;
            Screen_1_Source_ChangedEvent = null;
            Source_ChangedEvent = null;
            Screen_2_Source_ChangedEvent = null;
        }

        #endregion
    }
}
